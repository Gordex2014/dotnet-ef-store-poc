// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.DataAccess.Persistence;

#nullable disable

namespace Store.DataAccess.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Core.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("image_active");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("image_product_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            ProductId = 1,
                            Url = "https://cdn.thewirecutter.com/wp-content/media/2021/03/cheap-desktop-pc-2048px-dell-inspiron.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            ProductId = 1,
                            Url = "https://rukminim1.flixcart.com/image/416/416/kcw9w280/cpu/t/7/t/home-desktop-series-budget-pc-pro-original-imaftwj5hkupvuyn.jpeg?q=70"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            ProductId = 2,
                            Url = "https://ae01.alicdn.com/kf/H73cf9845043d47308a6314fc29e498a9a/US-English-laptop-keyboard-for-ASUS-vivobook-14-X409-x409fa-X409FB-X409DA-X409BA-QWERTY-notebook-pc.jpg_Q90.jpg_.webp"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            ProductId = 3,
                            Url = "https://cdn.shopify.com/s/files/1/0061/7594/8882/products/SY-PCBuild-Frost.png?v=1658745338"
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("part_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("part_active");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("part_currency");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("part_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("part_name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("part_price");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("part_stock");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("part_unit");

                    b.HasKey("Id");

                    b.ToTable("parts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Currency = "USD",
                            Description = "A simple ASUS cooler",
                            Name = "ASUS Cooler",
                            Price = 30.00m,
                            Stock = 30,
                            Unit = "piece"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Currency = "USD",
                            Description = "A simple RAM module",
                            Name = "Corsair RAM",
                            Price = 56.00m,
                            Stock = 25,
                            Unit = "piece"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Currency = "USD",
                            Description = "Intel Core i7 8th gen",
                            Name = "Intel Core i7",
                            Price = 500.00m,
                            Stock = 9,
                            Unit = "piece"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Currency = "USD",
                            Description = "Monitor stand, just to seel in a combo",
                            Name = "Monitor Stand",
                            Price = 40.00m,
                            Stock = 15,
                            Unit = "piece"
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("product_active");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_currency");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("product_description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("product_price");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_slug");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("product_stock");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_title");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Currency = "USD",
                            Description = "A budget PC, can run a bunch of games in medium quality",
                            Price = 500.00m,
                            Slug = "budget-computer",
                            Stock = 4,
                            Title = "Budget Computer"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Currency = "USD",
                            Description = "Asus keyboard for productivity",
                            Price = 50.00m,
                            Slug = "asus-keyboard",
                            Stock = 5,
                            Title = "Asus Keyboard"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Currency = "USD",
                            Description = "A gaming desktop PC that can run most of the games",
                            Price = 1900.00m,
                            Slug = "gaming-pc",
                            Stock = 2,
                            Title = "Gaming PC"
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.ProductPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_part_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("product_part_active");

                    b.Property<int>("PartId")
                        .HasColumnType("integer")
                        .HasColumnName("product_part_part_id");

                    b.Property<int>("PartsRequired")
                        .HasColumnType("integer")
                        .HasColumnName("product_part_parts_required");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_part_product_id");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("ProductId");

                    b.ToTable("products_parts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            PartId = 1,
                            PartsRequired = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            PartId = 2,
                            PartsRequired = 2,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.Image", b =>
                {
                    b.HasOne("Store.Core.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Core.Entities.ProductPart", b =>
                {
                    b.HasOne("Store.Core.Entities.Part", "Part")
                        .WithMany("ProductParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Core.Entities.Product", "Product")
                        .WithMany("ProductParts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Core.Entities.Part", b =>
                {
                    b.Navigation("ProductParts");
                });

            modelBuilder.Entity("Store.Core.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductParts");
                });
#pragma warning restore 612, 618
        }
    }
}
